#!/bin/bash

if [ $# -ne 1 ]; then
	echo -e "Usage:\t $0 kernel_major_number\ne.g.\t $0 3.0"
	exit 1
fi

VERSION=$1

print_version()
{
	printf "\"$VERSION.$SUB\"\t"
#	printf "released on $date\n"
	printf "$date\t"
#	printf "$(($count - 1)) commits\n"
	printf "$(($count - 1))\n"
}

get_date()
{
	# get the commit id of the release
	commit=`git show v$VERSION.$SUB | grep commit | cut -f 2 -d ' '`
#	echo "commit = $commit"
#	date=`git show v2.6.$VERSION.$SUB | grep Date: | tail -n 1`
	date=`git show $commit --format="%ci"| head -n 1 | cut -f 1 -d ' '`

}

do_version()
{
	get_date
	PREV=$(($SUB - 1))

	# get the commit id of the release
#	commit=`git show v2.6.$VERSION.$SUB | grep commit | cut -f 2 -d ' '`
#	echo "commit = $commit"
##	date=`git show v2.6.$VERSION.$SUB | grep Date: | tail -n 1`
#	date=`git show $commit --format="%ci"| head -n 1`
	count=`git log v$VERSION.$PREV..v$VERSION.$SUB | grep Author: | wc -l`
	total_count=$(($total_count + $count - 1))
	print_version
}

# do the first release first
count=`git log v$VERSION..v$VERSION.1 | grep Author: | wc -l`
SUB=1
get_date
print_version
total_count=$(($count - 1))

# make range larger once we pass 400 for any one kernel release...
for SUB in {2..400}
do
	# check the version is here
	TMP=`git show v$VERSION.$SUB --pretty=oneline 2>/dev/null`
	if [ x"$TMP" != x ]; then
		# it is, so print out the version information
		do_version
	fi
done

printf "Total number of fixes:\t$(($total_count))\n"

